B+树图文解释：https://blog.csdn.net/qq_26222859/article/details/80631121
该作者的其他文章，很很牛。

1、B+树总结：
    首先B+树中间节点没有卫星数据，【同样大小的磁盘页】可以容纳【更多的节点元素】。
    这意味着B+树比B-树更加矮胖。
    B+树最终必须查找到叶子节点，B-树查询到数据就返回，无论是叶子节点，还是根节点。因此B树的查询效率不稳定。

    在数据库的聚集索引（Clustered Index）中，叶子节点直接包含卫星数据。
    在非聚集索引（NonClustered Index）中，叶子节点带有指向卫星数据的指针。


一、引言
    二叉查找树的查找的时间复杂度是Ｏ(log N)，其查找效率已经足够高了

    那为什么还有Ｂ树和Ｂ＋树的出现呢？
    Ｂ树和Ｂ＋树的出现是因为另外一个问题，那就是磁盘ＩＯ，IO操作效率很低。
    最坏情况下为树的高度，平衡二叉树由于树深度过大而造成磁盘IO读写过于频繁，进而导致效率低下。

    补充
    磁盘读取数据是以盘块(block)为基本单位的。位于同一盘块中的所有数据都能被一次性全部读取出来
    因此我们应该尽量将相关信息存放在同一盘块，同一磁道中，至少放在同一柱面或相邻柱面上，
    以求在读/写信息时尽量减少磁头来回移动的次数，避免过多的查找时间Ts


    我们为了减少磁盘ＩＯ的次数，就你必须降低树的深度
    （1）、每个节点存储多个元素
    （2）、摒弃二叉树结构，采用多叉树。
    引出来了一个新的查找树结构 ——多路查找树

二、B tree
    参考：https://blog.csdn.net/z_ryan/article/details/79685072
    注意：
        扇区： 硬盘的最小读写单元
        块/簇： 是操作系统针对硬盘读写的最小单元
        page： 是内存与操作系统之间操作的最小单元。
        扇区 <= 块/簇 <= page

    B树主要用于文件系统中，在B树中，每个节点的大小为一个磁盘的页，节点中所包含的关键字及其子节点的数目取决于页的大小。

    B树中所有结点的孩子结点最大值称为B树的阶。

    一个度为m的B树，称为m阶B树，定义如下：
         （1）一个m阶B树，或者是空树，或者满足一下性质的m叉树；
         （2）根节点或者是叶子，或者至少有两颗子树，至多是m棵子树；
         （3）除根节点外，所有非终端节点至少是「m/2 （向上取整）棵子树，至多是m棵子树；
         （4）所有叶子节点都在树的同一层上。

    B树的范围查找需要不断依赖中序遍历。首先二分查找到范围下限，在不断通过中序遍历，知道查找到范围的上限即可。整个过程比较耗时。
    　　而B+树的范围查找则简单了许多。首先通过二分查找，找到范围下限，然后同过叶子结点的链表顺序遍历，直至找到上限即可，整个过程简单许多，效率也比较高。

2、B+tree
    1.有k个子树的中间节点包含有k个元素（B树中是k-1个元素），每个元素不保存数据，只用来索引，所有数据都保存在叶子节点。
        也就是有几个子节点，它的父节点包含几个元素，子节点只用作索引，不存数据。

    2.所有的叶子结点中包含了全部元素的信息，及指向含这些元素记录的指针，且叶子结点本身依关键字的大小自小而大顺序链接。

    3.所有的【中间节点元素】都同时【存在于子节点】，在子节点元素中是最大（或最小）元素。
        也就是所有的中间节点，都存有每个子节点的最大元素。

问题？块为啥不是越大越好，大了就能存更多的信息。

三、 二叉树的前序、中序、后序三种遍历
     前序遍历：根节点排最先，然后同级先左后右
     中序顺序是(先左后根最后右）；根节点放在中间。例如：遍历一颗数_____根节点_____
     后序顺序是（先左后右最后根）：

     我的总结：相对根而言规定的，前序就是先遍历根，根在中间的，便是中间遍历的。无论如何都是先左后右的顺序。


四、  B+树相比B树的优势：
    1.单一节点存储更多的元素，使得查询的IO次数更少；
    2.所有查询都要查找到叶子节点，查询性能稳定；
    3.所有叶子节点形成有序链表，便于范围查询。

五、hbase LSM tree
    1、查询：先查找内存中的存储，然后再查找内存中的文件。
        2、删除：删除是一种特殊的更改，当删除标记被存储之后，查找会跳过这些删除过的键。
        当页被重写后，有删除标记的键会被丢弃。
        3、修改：